{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC6BC,EAAAH,EAAKI,SAA9DC,EAAyDF,EAAzDG,MAAkBC,EAAuCJ,EAAvCK,KAAgBC,EAAuBN,EAAvBO,OA4B1C,SAASC,EAAcC,EAAUN,GAC/B,IAAMO,EAAgBC,KAAKC,SAAW,GACtC,OAAQC,QAAU,IAAIC,SAAQ,SAACC,EAASC,GACtCC,YAAW,WACLP,EACFK,EAAQ,CAAEN,WAAUN,UAEpBa,EAAO,CAAEP,WAAUN,S,GAEpBA,E,IAnCPN,EAAKqB,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAGC,iBAEH,IAAK,IAAIC,EAAI,EAAGA,EAAIC,OAAOC,SAASjB,EAAWkB,OAAQH,GAAK,EAAG,CAC7D,IAAMI,EAAWJ,EAAI,EACfK,EACJJ,OAAOC,SAASrB,EAAUsB,OAASF,OAAOC,SAASnB,EAASoB,OAASH,EAEvEb,EAAciB,EAAUC,GACrBC,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUN,EAAKyB,EAALzB,MACjB0B,EAAAlC,GAASmC,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAAN7B,EAAM,OAEhD8B,QAAQC,IAAI,uBAAwCF,OAAfvB,EAAS,QAAYuB,OAAN7B,EAAM,M,IAE3DgC,OAAM,SAAAP,G,IAAGnB,EAAQmB,EAARnB,SAAUN,EAAKyB,EAALzB,MAClB0B,EAAAlC,GAASmC,OAAOM,QACd,sBAAuCJ,OAAfvB,EAAS,QAAYuB,OAAN7B,EAAM,OAE/C8B,QAAQC,IAAI,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAAN7B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst { delay: formDelay, step: formStep, amount: formAmount } = form.elements;\n\nform.addEventListener('submit', submitHandler);\n\nfunction submitHandler(ev) {\n  ev.preventDefault();\n\n  for (let i = 0; i < Number.parseInt(formAmount.value); i += 1) {\n    const position = i + 1;\n    const delay =\n      Number.parseInt(formDelay.value) + Number.parseInt(formStep.value) * i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return (promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  }));\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$_elements","elements","$ce04d3a99e08e73b$var$formDelay","delay","$ce04d3a99e08e73b$var$formStep","step","$ce04d3a99e08e73b$var$formAmount","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","promise","Promise","resolve","reject","setTimeout","addEventListener","ev","preventDefault","i","Number","parseInt","value","position1","delay1","then","param","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.d4d2aec5.js.map"}